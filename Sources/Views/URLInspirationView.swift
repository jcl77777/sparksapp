import SwiftUI
import CoreData

struct URLInspirationView: View {
    @Environment(\.presentationMode) var presentationMode
    @EnvironmentObject var viewModel: InspirationViewModel
    
    @State private var urlString: String = ""
    @State private var websiteTitle: String = ""
    @State private var description: String = ""
    @State private var selectedTags: Set<String> = []
    @State private var isLoading = false
    @State private var showingSuccessView = false
    @State private var errorMessage: String?
    
    var body: some View {
        if showingSuccessView {
            ScrollView {
                VStack(spacing: 0) {
                    // Success Header
                    GradientHeader(
                        title: "‚úì " + NSLocalizedString("url_success", comment: "ÂÑ≤Â≠òÊàêÂäüÔºÅ"),
                        gradientColors: AppDesign.Colors.orangeGradient
                    )

                    VStack(spacing: AppDesign.Spacing.large) {
                        Text("‚úì")
                            .font(.system(size: 80, design: .monospaced))
                            .foregroundColor(AppDesign.Colors.orange)

                        Text(NSLocalizedString("url_saved", comment: "Á∂≤ÂùÄÂ∑≤ÊàêÂäüÂÑ≤Â≠òÂà∞Êî∂Ëóè"))
                            .font(.system(size: AppDesign.Typography.bodySize, design: .monospaced))
                            .foregroundColor(AppDesign.Colors.textSecondary)

                        VStack(spacing: AppDesign.Spacing.small) {
                            PixelButton(
                                "‚úì " + NSLocalizedString("url_done", comment: "ÂÆåÊàê"),
                                color: AppDesign.Colors.orange
                            ) {
                                presentationMode.wrappedValue.dismiss()
                            }
                        }
                    }
                    .padding(AppDesign.Spacing.standard)
                }
            }
        } else {
            ScrollView {
                VStack(spacing: 0) {
                    // Gradient Header
                    GradientHeader(
                        title: "üîó " + NSLocalizedString("add_url_title", comment: "Êñ∞Â¢ûÁ∂≤ÂùÄ"),
                        gradientColors: AppDesign.Colors.orangeGradient
                    )

                    VStack(spacing: AppDesign.Spacing.standard) {
                        // Á∂≤ÂùÄËº∏ÂÖ•
                        VStack(alignment: .leading, spacing: AppDesign.Spacing.small) {
                            Text(NSLocalizedString("url_title", comment: "Á∂≤ÂùÄ"))
                                .font(.system(size: AppDesign.Typography.bodySize, weight: .bold, design: .monospaced))
                                .foregroundColor(AppDesign.Colors.textPrimary)

                            HStack(spacing: AppDesign.Spacing.small) {
                                TextField(NSLocalizedString("url_placeholder", comment: "Ëº∏ÂÖ•Á∂≤ÂùÄ"), text: $urlString)
                                    .font(.system(size: AppDesign.Typography.bodySize, design: .monospaced))
                                    .padding(AppDesign.Spacing.small)
                                    .background(Color.white)
                                    .cornerRadius(AppDesign.Borders.radiusCard)
                                    .overlay(
                                        RoundedRectangle(cornerRadius: AppDesign.Borders.radiusCard)
                                            .stroke(AppDesign.Colors.borderPrimary, lineWidth: AppDesign.Borders.thin)
                                    )
                                    .autocapitalization(.none)
                                    .disableAutocorrection(true)

                                Button(action: fetchWebsiteInfo) {
                                    Text("‚¨áÔ∏è")
                                        .font(.system(size: 20))
                                }
                                .disabled(urlString.isEmpty || isLoading)
                                .opacity(urlString.isEmpty || isLoading ? 0.5 : 1.0)
                            }

                            if isLoading {
                                HStack {
                                    ProgressView()
                                        .scaleEffect(0.8)
                                    Text(NSLocalizedString("url_loading", comment: "Ê≠£Âú®ÊäìÂèñÁ∂≤Á´ôË≥áË®ä..."))
                                        .font(.system(size: AppDesign.Typography.labelSize, design: .monospaced))
                                        .foregroundColor(AppDesign.Colors.textSecondary)
                                }
                            }

                            if let errorMessage = errorMessage {
                                Text(errorMessage)
                                    .font(.system(size: AppDesign.Typography.labelSize, design: .monospaced))
                                    .foregroundColor(.red)
                            }
                        }

                        // È†êË¶Ω
                        if !websiteTitle.isEmpty {
                            VStack(alignment: .leading, spacing: AppDesign.Spacing.small) {
                                Text(NSLocalizedString("url_preview", comment: "È†êË¶Ω"))
                                    .font(.system(size: AppDesign.Typography.bodySize, weight: .bold, design: .monospaced))
                                    .foregroundColor(AppDesign.Colors.textPrimary)

                                PixelCard(borderColor: AppDesign.Colors.blue) {
                                    VStack(alignment: .leading, spacing: AppDesign.Spacing.small) {
                                        HStack {
                                            Text("üîó")
                                                .font(.system(size: 20))
                                            Text(websiteTitle)
                                                .font(.system(size: AppDesign.Typography.bodySize, weight: .bold, design: .monospaced))
                                                .foregroundColor(AppDesign.Colors.textPrimary)
                                                .lineLimit(2)
                                        }

                                        Text(urlString)
                                            .font(.system(size: AppDesign.Typography.labelSize, design: .monospaced))
                                            .foregroundColor(AppDesign.Colors.textSecondary)
                                            .lineLimit(1)
                                    }
                                    .padding(AppDesign.Spacing.standard)
                                }
                            }
                        }

                        // ÊèèËø∞
                        VStack(alignment: .leading, spacing: AppDesign.Spacing.small) {
                            Text(NSLocalizedString("url_description_optional", comment: "ÊèèËø∞ÔºàÂèØÈÅ∏Ôºâ"))
                                .font(.system(size: AppDesign.Typography.bodySize, weight: .bold, design: .monospaced))
                                .foregroundColor(AppDesign.Colors.textPrimary)

                            TextEditor(text: $description)
                                .font(.system(size: AppDesign.Typography.bodySize, design: .monospaced))
                                .frame(minHeight: 100)
                                .padding(AppDesign.Spacing.small)
                                .background(Color.white)
                                .cornerRadius(AppDesign.Borders.radiusCard)
                                .overlay(
                                    RoundedRectangle(cornerRadius: AppDesign.Borders.radiusCard)
                                        .stroke(AppDesign.Colors.borderPrimary, lineWidth: AppDesign.Borders.thin)
                                )
                        }

                        // Ê®ôÁ±§
                        VStack(alignment: .leading, spacing: AppDesign.Spacing.small) {
                            Text(NSLocalizedString("url_tags_optional", comment: "Ê®ôÁ±§ÔºàÂèØÈÅ∏Ôºâ"))
                                .font(.system(size: AppDesign.Typography.bodySize, weight: .bold, design: .monospaced))
                                .foregroundColor(AppDesign.Colors.textPrimary)

                            if viewModel.availableTags.isEmpty {
                                Text(NSLocalizedString("url_no_tags", comment: "ÈÇÑÊ≤íÊúâÊ®ôÁ±§ÔºåË´ãÂÖàÂú®Ë®≠ÂÆö‰∏≠Êñ∞Â¢ûÊ®ôÁ±§"))
                                    .font(.system(size: AppDesign.Typography.bodySize, design: .monospaced))
                                    .foregroundColor(AppDesign.Colors.textSecondary)
                            } else {
                                VStack(spacing: AppDesign.Spacing.small) {
                                    ForEach(viewModel.availableTags, id: \.objectID) { tag in
                                        MultipleSelectionRow(
                                            title: tag.name ?? "",
                                            isSelected: selectedTags.contains(tag.name ?? ""),
                                            action: {
                                                if let tagName = tag.name {
                                                    if selectedTags.contains(tagName) {
                                                        selectedTags.remove(tagName)
                                                    } else {
                                                        selectedTags.insert(tagName)
                                                    }
                                                }
                                            }
                                        )
                                    }
                                }
                            }
                        }

                        // ÊåâÈàïÂçÄÂüü
                        VStack(spacing: AppDesign.Spacing.small) {
                            PixelButton(
                                "üíæ " + NSLocalizedString("url_save", comment: "ÂÑ≤Â≠ò"),
                                color: AppDesign.Colors.orange
                            ) {
                                saveURL()
                            }
                            .disabled(urlString.isEmpty || websiteTitle.isEmpty)
                            .opacity((urlString.isEmpty || websiteTitle.isEmpty) ? 0.5 : 1.0)

                            PixelButton(
                                NSLocalizedString("url_cancel", comment: "ÂèñÊ∂à"),
                                style: .secondary,
                                color: AppDesign.Colors.gray
                            ) {
                                presentationMode.wrappedValue.dismiss()
                            }
                        }
                        .padding(.top, AppDesign.Spacing.small)
                    }
                    .padding(AppDesign.Spacing.standard)
                }
            }
        }
    }
    
    private func fetchWebsiteInfo() {
        guard let url = URL(string: urlString) else {
            errorMessage = "ÁÑ°ÊïàÁöÑÁ∂≤ÂùÄÊ†ºÂºè"
            return
        }
        
        isLoading = true
        errorMessage = nil
        
        let task = URLSession.shared.dataTask(with: url) { data, response, error in
            DispatchQueue.main.async {
                isLoading = false
                
                if let error = error {
                    errorMessage = "ÁÑ°Ê≥ïÈÄ£Êé•Âà∞Á∂≤Á´ôÔºö\(error.localizedDescription)"
                    return
                }
                
                guard let data = data,
                      let htmlString = String(data: data, encoding: .utf8) else {
                    errorMessage = "ÁÑ°Ê≥ïËÆÄÂèñÁ∂≤Á´ôÂÖßÂÆπ"
                    return
                }
                
                // Á∞°ÂñÆÁöÑ HTML Ê®ôÈ°åÊäìÂèñ
                if let titleRange = htmlString.range(of: "<title>"),
                   let titleEndRange = htmlString.range(of: "</title>") {
                    let titleStart = htmlString.index(titleRange.upperBound, offsetBy: 0)
                    let extractedTitle = String(htmlString[titleStart..<titleEndRange.lowerBound])
                    websiteTitle = extractedTitle.trimmingCharacters(in: .whitespacesAndNewlines)
                } else {
                    // Â¶ÇÊûúÊ≤íÊúâÊâæÂà∞ title Ê®ôÁ±§Ôºå‰ΩøÁî®Á∂≤ÂùÄ‰ΩúÁÇ∫Ê®ôÈ°å
                    websiteTitle = url.host ?? urlString
                }
            }
        }
        
        task.resume()
    }
    
    private func saveURL() {
        // Âª∫Á´ãÊñ∞ÁöÑÁ∂≤ÂùÄÈùàÊÑü
        let inspiration = Inspiration(context: viewModel.context)
        inspiration.id = UUID()
        inspiration.title = websiteTitle.isEmpty ? "ÔºàÊú™ÂëΩÂêçÔºâ" : websiteTitle
        inspiration.content = description.isEmpty ? nil : description
        inspiration.url = urlString
        inspiration.type = 2 // Á∂≤ÂùÄÈ°ûÂûã
        inspiration.createdAt = Date()
        inspiration.updatedAt = Date()
        
        // Ë®≠ÂÆöÊ®ôÁ±§
        for tagName in selectedTags {
            if let tag = viewModel.availableTags.first(where: { $0.name == tagName }) {
                inspiration.addToTags(tag)
            }
        }
        
        // ‰ΩøÁî® ViewModel ÂÑ≤Â≠ò
        viewModel.saveContext()
        
        // È°ØÁ§∫ÊàêÂäü‰ªãÈù¢
        withAnimation(.easeInOut(duration: 0.3)) {
            showingSuccessView = true
        }
    }
}

struct URLInspirationView_Previews: PreviewProvider {
    static var previews: some View {
        Text("URLInspirationView Preview")
            .environmentObject(InspirationViewModel(context: PersistenceController.preview.container.viewContext))
    }
} 